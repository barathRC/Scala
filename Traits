#1

object TraitDemo extends App{


  trait A
  {
    var myvariable:Int
    def myfun();
    def myfullfunction = {println("Hi i am implemented")}

  }

  trait B
  {
    def myfun1();
    def myfun2();
    var variable2: Int
  }

  class myAimpl extends A with B with C
  {
    override def myfun(): Unit = "I am implementing in my class"
    override var myvariable: Int = 4

    override def myfun1(): Unit = println("I am fun1")

    override def myfun2(): Unit = println("I am fun2")

    override var variable2: Int = 5
  }
 trait C extends B
  val myobj = new myAimpl
  myobj.myfun()
  myobj.myvariable
  myobj.myfun1()

}

#2
A trait is like a partially implemented interface that can hold abstract and non-abstract methods. 
They’re like Java interfaces; that is what Scala compiles them into. Let’s take an example.

scala> trait Hello{
    | def sayhello()
    | }
defined trait Hello


scala> class A extends Hello{
    | def sayhello(){
    | println("Hello")
    | }
    | }
defined class A
scala> var a=new A()
a: A = A@10e595ed
scala> a.sayhello()
Hello
